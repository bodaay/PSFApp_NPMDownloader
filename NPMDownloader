#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "NPMDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
