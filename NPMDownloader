#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "NPMDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
