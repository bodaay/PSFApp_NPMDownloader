#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "NPMDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
