#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "NPMDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
