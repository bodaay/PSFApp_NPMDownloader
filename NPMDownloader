#!/usr/bin/python3
import os
import base64
import sqlite3
import os
import sys
import shutil
import importlib
import zlib
# The default app folder, MUST have a file named app.py with a function called: def start(argv):
DEFAULT_APP_FOLDER = "NPMDownloaderApp"


def start():
    module = importlib.import_module(DEFAULT_APP_FOLDER + ".app")
    module.start(sys.argv)


def update():
    if not os.path.exists(DEFAULT_APP_FOLDER):
        exit("Cannot update, app folder \"%s\" missing" %
             (DEFAULT_APP_FOLDER))
    # init new db file, delete if it exists before
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    conn = sqlite3.connect(temp_dbfile)
    conn.execute(
        "CREATE TABLE \"appfiles\" ( `id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, `filename` TEXT NOT NULL, `data` BLOB )")

    # Get All files with app folder
    for dirpath, _, filenames in os.walk(DEFAULT_APP_FOLDER):
        for name in filenames:
            if dirpath.endswith("__pycache__"):
                continue
            # Read the file content
            with open(os.path.join(dirpath, name), 'rb') as content:
                conn.execute(
                    "INSERT INTO appfiles(filename,data) VALUES (?,?)", [os.path.join(dirpath, name), content.read()])
    conn.commit()
    conn.close()
    with open(temp_dbfile, 'rb') as d:
        compressedData = zlib.compress(d.read(), 9)
        dbbytes_base64 = base64.b64encode(compressedData).decode('utf-8')
        d.close()
        with open(sys.argv[0], 'r') as w:
            lines = w.readlines()
            w.close()
            for i in range(0, len(lines)):
                if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                    lines[i+1] = dbbytes_base64 + "\n"
                    break
            with open(sys.argv[0], 'w') as wr:
                wr.writelines(lines)
            print("I've updated myself :)")
            os.remove(temp_dbfile)


def install():
    # we will read outself, data should be place at the end of this file
    myselffile = sys.argv[0]
    dataBase64 = ""
    with open(myselffile, 'r') as w:
        lines = w.readlines()
        w.close()
        for i in range(0, len(lines)):
            if lines[i].startswith("--DATA-BEGIN-ZLIB-COMPRESSED"):
                # -1 for line break at the end of the file
                dataBase64 = lines[i+1][:-1]
                break

    db_bytes_compressed = base64.b64decode(dataBase64)
    db_bytes_extracted = zlib.decompress(db_bytes_compressed)
    temp_dbfile = DEFAULT_APP_FOLDER + ".temp.db"
    if os.path.exists(temp_dbfile):
        os.remove(temp_dbfile)
    with open(temp_dbfile, 'wb') as w:
        w.write(db_bytes_extracted)
        conn = sqlite3.connect(temp_dbfile)
        try:
            cursor = conn.cursor()
            cursor.execute("select * from appfiles")
            results = cursor.fetchall()
            if not os.path.exists(DEFAULT_APP_FOLDER):
                os.makedirs(DEFAULT_APP_FOLDER)
            for _, r_filename, r_data in results:
                os.makedirs(os.path.dirname(r_filename), exist_ok=True)
                with open(r_filename, 'wb') as w:
                    w.write(r_data)
        except Exception as ex:
            exit(ex)
        os.remove(temp_dbfile)


def main():
    RunMode = "start"
    if len(sys.argv) > 1:
        RunMode = sys.argv[1].lower()
    if RunMode == "start":
        if not os.path.exists(DEFAULT_APP_FOLDER):
            install()
        start()
    elif RunMode == "install":
        if os.path.exists(DEFAULT_APP_FOLDER):
            shutil.rmtree(DEFAULT_APP_FOLDER, ignore_errors=True)
        install()
        start()
    elif RunMode == "update":
        update()


if __name__ == "__main__":
    main()


"""
--DATA-BEGIN-ZLIB-COMPRESSED
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
--DATA-END-ZLIB-COMPRESSED
"""
